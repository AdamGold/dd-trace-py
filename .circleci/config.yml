version: 2.1

s3_dir_dev: &s3_dir_dev trace-dev
s3_dir_prod: &s3_dir_prod trace
s3_bucket: &s3_bucket pypi.datadoghq.com

resource_class: &resource_class medium
cimg_base_image: &cimg_base_image cimg/base:2020.01
python38-alpine_image: &python38-alpine_image python:3.8-alpine
python38_image: &python38_image circleci/python:3.8
python37_image: &python37_image circleci/python:3.7
python36_image: &python36_image circleci/python:3.6
python35_image: &python35_image circleci/python:3.5
python27_image: &python27_image circleci/python:2.7
ddtrace_dev_image: &ddtrace_dev_image datadog/dd-trace-py:latest
datadog_agent_image: &datadog_agent_image datadog/docker-dd-agent:latest

orbs:
  win: circleci/windows@2.2.0

machine_executor: &machine_executor
  machine:
    image: ubuntu-1604:201903-01
  environment:
    - BOTO_CONFIG: /dev/null
  steps:
    - &pyenv-set-global
      run:
        name: Set global pyenv
        command: |
          pyenv global 3.6.5

commands:
  deploy_docs:
    description: "Deploy docs"
    parameters:
      s3_dir:
        type: string
      s3_bucket:
        type: string
        default: *s3_bucket
    steps:
      - setup_tox
      - run: pip install awscli
      - run: tox -e docs
      - run:
          name: Release docs
          command: aws s3 cp --recursive docs/_build/html/ "s3://<< parameters.s3_bucket >>/<< parameters.s3_dir >>/docs/"

  deploy_wheels:
    description: "Deploy wheels"
    parameters:
      s3_dir:
        type: string
        default: *s3_dir_dev
      s3_bucket:
        type: string
        default: *s3_bucket
    steps:
      - run: pip install awscli cython mkwheelhouse
      - run:
          name: Release wheels to dev site
          command: scripts/mkwheelhouse
          environment:
            S3_DIR: << parameters.s3_dir >>
            S3_BUCKET: << parameters.s3_bucket >>

  setup_tox:
    description: "Install tox"
    steps:
      - run: pip install -U tox

  restore_tox_cache:
    description: "Restore .tox directory from previous runs for faster installs"
    steps:
      - restore_cache:
          # In the cache key:
          #   - .Environment.CIRCLE_JOB: We do separate tox environments by job name, so caching and restoring is
          #                              much faster.
          key: tox-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}

  save_tox_cache:
    description: "Save .tox directory into cache for faster installs next time"
    steps:
      - save_cache:
          # In the cache key:
          #   - .Environment.CIRCLE_JOB: We do separate tox environments by job name, so caching and restoring is
          #                              much faster.
          key: tox-cache-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}
          paths:
            - ".tox"

  run_tox_scenario:
    description: "Run scripts/run-tox-scenario with setup, caching and persistence"
    parameters:
      pattern:
        type: string
      wait:
        type: string
        default: ""
    steps:
      - restore_tox_cache
      - when:
          condition:
            << parameters.wait >>
          steps:
            - run:
                name: "Waiting for << parameters.wait >>"
                command: tox -e 'wait' << parameters.wait >>
      - run:
          name: "Run scripts/run-tox-scenario"
          command: scripts/ddtest scripts/run-tox-scenario '<< parameters.pattern >>'
      - save_tox_cache

  test_build:
    description: "Build the package extensions and wheel to validate builds work"
    steps:
      - checkout
      - run:
          name: Run test build
          command: .circleci/scripts/test_build.sh

executors:
  cimg_base:
    docker:
      - image: *cimg_base_image
    resource_class: *resource_class
  python38-alpine:
    docker:
      - image: *python38-alpine_image
    resource_class: *resource_class
  python38:
    docker:
      - image: *python38_image
    resource_class: *resource_class
  python37:
    docker:
      - image: *python37_image
    resource_class: *resource_class
  python36:
    docker:
      - image: *python36_image
    resource_class: *resource_class
  python35:
    docker:
      - image: *python35_image
    resource_class: *resource_class
  python27:
    docker:
      - image: *python27_image
    resource_class: *resource_class
  ddtrace_dev:
    docker:
      - image: *ddtrace_dev_image
    resource_class: *resource_class

# Common configuration blocks as YAML anchors
# See: https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
deploy_docs_filters: &deploy_docs_filters
  filters:
    tags:
      only: /(^docs$)|(^v[0-9]+(\.[0-9]+)*$)/
    branches:
      ignore: /.*/

datadog_agent: &datadog_agent
  image: *datadog_agent_image
  environment:
    DD_APM_ENABLED: true
    DD_BIND_HOST: 0.0.0.0
    DD_API_KEY: invalid_key_but_this_is_fine

jobs:
  black:
    executor: python38
    steps:
      - checkout
      - setup_tox
      - run: tox -e 'black' --result-json /tmp/black.results

  flake8:
    executor: python38
    steps:
      - checkout
      - setup_tox
      - run: tox -e 'flake8' --result-json /tmp/flake8.results

  build-docker-ci-image:
    executor: cimg_base
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          docker build .

  test_build_alpine:
    executor: python38-alpine
    steps:
      - run: apk add git gcc musl-dev libffi-dev openssl-dev bash
      - test_build
  test_build_py38:
    executor: python38
    steps:
      - test_build
  test_build_py37:
    executor: python37
    steps:
      - test_build
  test_build_py36:
    executor: python36
    steps:
      - test_build
  test_build_py35:
    executor: python35
    steps:
      - test_build
  test_build_py27:
    executor: python27
    steps:
      - test_build
  test_build_win_py38: &test_build_win
    executor:
      name: win/default
      size: *resource_class
      shell: bash.exe
    environment:
      PYTHON_VERSION: 3.8.3
    working_directory: ~/repo
    steps:
      - checkout
      - test_build
  test_build_win_py37:
    <<: *test_build_win
    environment:
      PYTHON_VERSION: 3.7.7
  test_build_win_py36:
    <<: *test_build_win
    environment:
      PYTHON_VERSION: 3.6.8
  test_build_win_py35:
    <<: *test_build_win
    environment:
      PYTHON_VERSION: 3.5.4

  tracer:
    executor: ddtrace_dev
    steps:
      - run_tox_scenario:
          pattern: '^py..-tracer'

  opentracer:
    executor: ddtrace_dev
    steps:
      - run_tox_scenario:
          pattern: '^py..-opentracer'

  profile:
    executor: ddtrace_dev
    steps:
      - run_tox_scenario:
          pattern: '^py..-profile'

  integration:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d ddagent
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^py..-integration'

  ddtracerun:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d redis
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^py..-ddtracerun$'

  aiopg:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d rabbitmq
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^aiopg_contrib-'

  asyncio:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^asyncio_contrib-'

  futures:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^futures_contrib-'

  boto:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^boto\(core\)\?_contrib-'

  aiobotocore:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d moto
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^aiobotocore_contrib'

  aiohttp:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^aiohttp_contrib-'

  algoliasearch:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^algoliasearch_contrib-'

  asgi:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^asgi_contrib-'

  bottle:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^bottle_contrib\(_autopatch\)\?-'

  cassandra:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d cassandra
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^cassandra_contrib-'

  celery:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d redis
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^celery_contrib-'

  consul:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d consul
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^consul_contrib-'

  dogpile_cache:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^dogpile_contrib-'

  elasticsearch:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d elasticsearch
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^elasticsearch_contrib-'

  dbapi:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^dbapi_contrib-'

  django:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d redis memcached ddagent
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^django_contrib'

  djangorestframework:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d redis memcached ddagent
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^django_drf_contrib'

  falcon:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^falcon_contrib'

  flask:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d redis memcached
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^flask_\(cache_\)\?contrib\(_autopatch\)\?-'

  gevent:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^gevent_contrib-'

  httplib:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^httplib_contrib'

  grpc:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^grpc_contrib-'

  jinja2:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^jinja2_contrib-'

  kombu:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d rabbitmq
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^kombu_contrib-'

  logging:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^py..-test_logging$'

  mako:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^mako_contrib-'

  molten:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^molten_contrib-'

  mysqlconnector:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d mysql
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^mysql_contrib-.*-mysqlconnector'

  mysqlpython:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d mysql
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^mysqldb_contrib-.*-mysqlclient'

  mysqldb:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d mysql
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^mysqldb_contrib-.*-mysqldb'

  mongoengine:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d mongo
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^mongoengine_contrib-'

  psycopg:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d postgres
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^psycopg_contrib-'

  pylibmc:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d memcached
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^pylibmc_contrib-'

  pylons:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^pylons_contrib-'

  pymysql:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d mysql
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^pymysql_contrib-'

  pymemcache:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d memcached
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^pymemcache_contrib\(_autopatch\)\?-'

  pymongo:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d mongo
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^pymongo_contrib-'

  pyramid:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^pyramid_contrib\(_autopatch\)\?-'

  requests:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d httpbin
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^requests_contrib\(_autopatch\)\?-'

  requestsgevent:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^requests_gevent_contrib-'

  sanic:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^sanic_contrib-'

  sqlalchemy:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d postgres mysql
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^sqlalchemy_contrib-'

  tornado:
    <<: *machine_executor
    steps:
      - run_tox_scenario:
          pattern: '^tornado_contrib-'

  redis:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d redis
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^redis_contrib-'

  rediscluster:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d rediscluster
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^rediscluster_contrib-'

  vertica:
    <<: *machine_executor
    steps:
      - checkout
      - run: docker-compose up -d vertica
      - run:
          command: docker-compose logs -f
          background: true
      - run_tox_scenario:
          pattern: '^vertica_contrib-'

  sqlite3:
    executor: ddtrace_dev
    steps:
      - run_tox_scenario:
          pattern: '^sqlite3_contrib-'

  benchmarks:
    executor: ddtrace_dev
    steps:
      - checkout
      - setup_tox
      - restore_tox_cache
      - run:
          command: |
            mkdir -p /tmp/test-reports
            tox -e 'benchmarks-{py27,py35,py36,py37,py38}' --result-json /tmp/benchmarks.results -- --benchmark-storage=file:///tmp/test-reports/ --benchmark-autosave
      - store_test_results:
          path: /tmp/test-reports
      - store_artifacts:
          path: /tmp/test-reports
      - save_tox_cache

  build_wheels:
    <<: *machine_executor
    steps:
      - checkout
      - *pyenv-set-global
      - run: pip install cython
      - run: scripts/build-dist

  deploy_master:
    # build the master branch releasing development docs and wheels
    <<: *machine_executor
    steps:
      - checkout
      - *pyenv-set-global
      - deploy_docs:
          s3_dir: *s3_dir_dev
      - deploy_wheels

  deploy_staging:
    <<: *machine_executor
    steps:
      - checkout
      - *pyenv-set-global
      - deploy_wheels

  build_docs:
    # deploy official documentation
    executor: python38
    steps:
      - checkout
      - setup_tox
      - run: tox -e docs
      - run:
          command: |
             mkdir -p /tmp/docs
             cp -r docs/_build/html/* /tmp/docs
      - store_artifacts:
          path: /tmp/docs

  deploy_docs:
    # deploy official documentation
    executor: python38
    steps:
      - checkout
      - deploy_docs:
          s3_dir: *s3_dir_prod

requires_pre_test: &requires_pre_test
  requires:
    - black
    - flake8

requires_tests: &requires_tests
  - build_docs
  - aiobotocore
  - aiohttp
  - aiopg
  - asyncio
  - algoliasearch
  - asgi
  - benchmarks
  - boto
  - bottle
  - cassandra
  - celery
  - consul
  - dbapi
  - ddtracerun
  - dogpile_cache
  - django
  - djangorestframework
  - elasticsearch
  - falcon
  - flask
  - futures
  - gevent
  - grpc
  - httplib
  - integration
  - profile
  - jinja2
  - kombu
  - mako
  - molten
  - mongoengine
  - mysqlconnector
  - mysqldb
  - mysqlpython
  - opentracer
  - psycopg
  - pylibmc
  - pylons
  - pymemcache
  - pymongo
  - pymysql
  - pyramid
  - redis
  - rediscluster
  - requests
  - requestsgevent
  - sqlalchemy
  - sqlite3
  - test_build_alpine
  - test_build_py38
  - test_build_py37
  - test_build_py36
  - test_build_py35
  - test_build_py27
  - logging
  - tracer
  - tornado
  - vertica
  - build-docker-ci-image

workflows:
  version: 2

  deploy_docs:
    jobs:
      - build_docs:
          <<: *deploy_docs_filters
      - approve_docs_deployment:
          <<: *deploy_docs_filters
          type: approval
          requires:
            - build_docs
      - deploy_docs:
          <<: *deploy_docs_filters
          requires:
            - approve_docs_deployment
  test:
    jobs:
      # Jobs that should run before individual integration test suites
      - build_docs
      - black
      - flake8

      # Test building the package
      - test_build_alpine: *requires_pre_test
      - test_build_py38: *requires_pre_test
      - test_build_py37: *requires_pre_test
      - test_build_py36: *requires_pre_test
      - test_build_py35: *requires_pre_test
      - test_build_py27: *requires_pre_test
      - test_build_win_py38: *requires_pre_test
      - test_build_win_py37: *requires_pre_test
      - test_build_win_py36: *requires_pre_test
      - test_build_win_py35: *requires_pre_test
      - build_wheels: *requires_pre_test

      # Integration test suites
      - aiobotocore: *requires_pre_test
      - aiohttp: *requires_pre_test
      - aiopg: *requires_pre_test
      - asyncio: *requires_pre_test
      - algoliasearch: *requires_pre_test
      - asgi: *requires_pre_test
      - benchmarks: *requires_pre_test
      - boto: *requires_pre_test
      - bottle: *requires_pre_test
      - cassandra: *requires_pre_test
      - celery: *requires_pre_test
      - consul: *requires_pre_test
      - dbapi: *requires_pre_test
      - ddtracerun: *requires_pre_test
      - django: *requires_pre_test
      - djangorestframework: *requires_pre_test
      - dogpile_cache: *requires_pre_test
      - elasticsearch: *requires_pre_test
      - falcon: *requires_pre_test
      - flask: *requires_pre_test
      - futures: *requires_pre_test
      - gevent: *requires_pre_test
      - grpc: *requires_pre_test
      - httplib: *requires_pre_test
      - integration: *requires_pre_test
      - profile: *requires_pre_test
      - jinja2: *requires_pre_test
      - kombu: *requires_pre_test
      - mako: *requires_pre_test
      - molten: *requires_pre_test
      - mongoengine: *requires_pre_test
      - mysqlconnector: *requires_pre_test
      - mysqldb: *requires_pre_test
      - mysqlpython: *requires_pre_test
      - opentracer: *requires_pre_test
      - psycopg: *requires_pre_test
      - pylibmc: *requires_pre_test
      - pylons: *requires_pre_test
      - pymemcache: *requires_pre_test
      - pymongo: *requires_pre_test
      - pymysql: *requires_pre_test
      - pyramid: *requires_pre_test
      - redis: *requires_pre_test
      - rediscluster: *requires_pre_test
      - requests: *requires_pre_test
      - requestsgevent: *requires_pre_test
      - sanic: *requires_pre_test
      - sqlalchemy: *requires_pre_test
      - sqlite3: *requires_pre_test
      - logging: *requires_pre_test
      - tornado: *requires_pre_test
      # tracer
      - tracer: *requires_pre_test
      - vertica: *requires_pre_test
      - build-docker-ci-image: *requires_pre_test
      - deploy_master:
          requires: *requires_tests
          filters:
            branches:
              only: master
      - deploy_staging:
          requires: *requires_tests
          filters:
            branches:
              only: staging
